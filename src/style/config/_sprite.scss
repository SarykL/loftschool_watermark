/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$fb-h-name: 'fb-h';
$fb-h-x: 235px;
$fb-h-y: 18px;
$fb-h-offset-x: -235px;
$fb-h-offset-y: -18px;
$fb-h-width: 15px;
$fb-h-height: 27px;
$fb-h-total-width: 269px;
$fb-h-total-height: 264px;
$fb-h-image: '../img/sprites/sprite.png';
$fb-h: (235px, 18px, -235px, -18px, 15px, 27px, 269px, 264px, '../img/sprites/sprite.png', 'fb-h', );
$fb-name: 'fb';
$fb-x: 220px;
$fb-y: 45px;
$fb-offset-x: -220px;
$fb-offset-y: -45px;
$fb-width: 15px;
$fb-height: 27px;
$fb-total-width: 269px;
$fb-total-height: 264px;
$fb-image: '../img/sprites/sprite.png';
$fb: (220px, 45px, -220px, -45px, 15px, 27px, 269px, 264px, '../img/sprites/sprite.png', 'fb', );
$like-h-name: 'like-h';
$like-h-x: 0px;
$like-h-y: 232px;
$like-h-offset-x: 0px;
$like-h-offset-y: -232px;
$like-h-width: 26px;
$like-h-height: 32px;
$like-h-total-width: 269px;
$like-h-total-height: 264px;
$like-h-image: '../img/sprites/sprite.png';
$like-h: (0px, 232px, 0px, -232px, 26px, 32px, 269px, 264px, '../img/sprites/sprite.png', 'like-h', );
$like-name: 'like';
$like-x: 26px;
$like-y: 200px;
$like-offset-x: -26px;
$like-offset-y: -200px;
$like-width: 26px;
$like-height: 32px;
$like-total-width: 269px;
$like-total-height: 264px;
$like-image: '../img/sprites/sprite.png';
$like: (26px, 200px, -26px, -200px, 26px, 32px, 269px, 264px, '../img/sprites/sprite.png', 'like', );
$regul-h-name: 'regul-h';
$regul-h-x: 196px;
$regul-h-y: 72px;
$regul-h-offset-x: -196px;
$regul-h-offset-y: -72px;
$regul-h-width: 24px;
$regul-h-height: 24px;
$regul-h-total-width: 269px;
$regul-h-total-height: 264px;
$regul-h-image: '../img/sprites/sprite.png';
$regul-h: (196px, 72px, -196px, -72px, 24px, 24px, 269px, 264px, '../img/sprites/sprite.png', 'regul-h', );
$regul-pointer-name: 'regul-pointer';
$regul-pointer-x: 250px;
$regul-pointer-y: 0px;
$regul-pointer-offset-x: -250px;
$regul-pointer-offset-y: 0px;
$regul-pointer-width: 19px;
$regul-pointer-height: 18px;
$regul-pointer-total-width: 269px;
$regul-pointer-total-height: 264px;
$regul-pointer-image: '../img/sprites/sprite.png';
$regul-pointer: (250px, 0px, -250px, 0px, 19px, 18px, 269px, 264px, '../img/sprites/sprite.png', 'regul-pointer', );
$regul-name: 'regul';
$regul-x: 172px;
$regul-y: 96px;
$regul-offset-x: -172px;
$regul-offset-y: -96px;
$regul-width: 24px;
$regul-height: 24px;
$regul-total-width: 269px;
$regul-total-height: 264px;
$regul-image: '../img/sprites/sprite.png';
$regul: (172px, 96px, -172px, -96px, 24px, 24px, 269px, 264px, '../img/sprites/sprite.png', 'regul', );
$tw-h-name: 'tw-h';
$tw-h-x: 144px;
$tw-h-y: 120px;
$tw-h-offset-x: -144px;
$tw-h-offset-y: -120px;
$tw-h-width: 28px;
$tw-h-height: 22px;
$tw-h-total-width: 269px;
$tw-h-total-height: 264px;
$tw-h-image: '../img/sprites/sprite.png';
$tw-h: (144px, 120px, -144px, -120px, 28px, 22px, 269px, 264px, '../img/sprites/sprite.png', 'tw-h', );
$tw-name: 'tw';
$tw-x: 116px;
$tw-y: 142px;
$tw-offset-x: -116px;
$tw-offset-y: -142px;
$tw-width: 28px;
$tw-height: 22px;
$tw-total-width: 269px;
$tw-total-height: 264px;
$tw-image: '../img/sprites/sprite.png';
$tw: (116px, 142px, -116px, -142px, 28px, 22px, 269px, 264px, '../img/sprites/sprite.png', 'tw', );
$vk-h-name: 'vk-h';
$vk-h-x: 84px;
$vk-h-y: 164px;
$vk-h-offset-x: -84px;
$vk-h-offset-y: -164px;
$vk-h-width: 32px;
$vk-h-height: 18px;
$vk-h-total-width: 269px;
$vk-h-total-height: 264px;
$vk-h-image: '../img/sprites/sprite.png';
$vk-h: (84px, 164px, -84px, -164px, 32px, 18px, 269px, 264px, '../img/sprites/sprite.png', 'vk-h', );
$vk-name: 'vk';
$vk-x: 52px;
$vk-y: 182px;
$vk-offset-x: -52px;
$vk-offset-y: -182px;
$vk-width: 32px;
$vk-height: 18px;
$vk-total-width: 269px;
$vk-total-height: 264px;
$vk-image: '../img/sprites/sprite.png';
$vk: (52px, 182px, -52px, -182px, 32px, 18px, 269px, 264px, '../img/sprites/sprite.png', 'vk', );
$spritesheet-width: 269px;
$spritesheet-height: 264px;
$spritesheet-image: '../img/sprites/sprite.png';
$spritesheet-sprites: ($fb-h, $fb, $like-h, $like, $regul-h, $regul-pointer, $regul, $tw-h, $tw, $vk-h, $vk, );
$spritesheet: (269px, 264px, '../img/sprites/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
